{"ast":null,"code":"import { Component, ViewChild, Input, NgModule } from '@angular/core';\nimport { gaugeChart } from 'gauge-chart';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * GaugeChart Component\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"gaugeArea\"];\nlet GaugeChartComponent = /*#__PURE__*/(() => {\n  class GaugeChartComponent {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      // calculate styles for name and bottomLabel\n      if (this.name) {\n        if (!this.nameFont) {\n          this.nameFont = '' + Math.round(this.canvasWidth / 15);\n        }\n\n        this.nameMargin = '' + Math.round(+this.nameFont / 4);\n      }\n\n      if (this.bottomLabel) {\n        if (!this.bottomLabelFont) {\n          this.bottomLabelFont = '' + Math.round(this.canvasWidth / 10);\n        }\n\n        this.bottomLabelMargin = '-' + this.bottomLabelFont;\n      }\n\n      if (this.optionsCheck()) {\n        this.element = this.gaugeArea.nativeElement;\n        this.drawChart();\n      }\n\n      this.oldOptions = JSON.parse(JSON.stringify(this.options));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    optionsCheck() {\n      if (this.canvasWidth == null) {\n        console.warn('gauge-chart warning: canvasWidth is not specified!');\n        return false;\n      } else if (this.needleValue == null) {\n        console.warn('gauge-chart warning: needleValue is not specified!');\n        return false;\n      }\n\n      if (this.centralLabel == null) {\n        this.centralLabel = '';\n      }\n\n      return true;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngDoCheck() {\n      if (!this.areEqual(this.options, this.oldOptions)) {\n        this.drawChart(true);\n        this.oldOptions = JSON.parse(JSON.stringify(this.options));\n      }\n    }\n    /**\n     * @param {?} obj1\n     * @param {?} obj2\n     * @return {?}\n     */\n\n\n    areEqual(obj1, obj2) {\n      return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    /**\n     * @param {?=} redraw\n     * @return {?}\n     */\n\n\n    drawChart(redraw = false) {\n      if (redraw) {\n        this.gaugeChart.removeGauge();\n      }\n\n      this.options.centralLabel = this.centralLabel;\n      this.gaugeChart = gaugeChart(this.element, this.canvasWidth, this.options);\n      this.gaugeChart.updateNeedle(this.needleValue);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes.needleValue && !changes.needleValue.firstChange) {\n        this.needleValue = changes.needleValue.currentValue;\n        this.gaugeChart.updateNeedle(this.needleValue);\n      }\n\n      if (changes.centralLabel && !changes.centralLabel.firstChange) {\n        this.centralLabel = changes.centralLabel.currentValue;\n        this.drawChart(true);\n      }\n    }\n\n  }\n\n  GaugeChartComponent.ɵfac = function GaugeChartComponent_Factory(t) {\n    return new (t || GaugeChartComponent)();\n  };\n\n  GaugeChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: GaugeChartComponent,\n    selectors: [[\"rg-gauge-chart\"]],\n    viewQuery: function GaugeChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.gaugeArea = _t.first);\n      }\n    },\n    inputs: {\n      nameFont: \"nameFont\",\n      bottomLabelFont: \"bottomLabelFont\",\n      centralLabel: \"centralLabel\",\n      needleValue: \"needleValue\",\n      canvasWidth: \"canvasWidth\",\n      options: \"options\",\n      wrapOptions: \"wrapOptions\",\n      name: \"name\",\n      bottomLabel: \"bottomLabel\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 12,\n    consts: [[1, \"gauge-chart\"], [\"gaugeArea\", \"\"], [1, \"gauge-chart__label\"]],\n    template: function GaugeChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", null, 1);\n        ɵngcc0.ɵɵelementStart(5, \"span\", 2);\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.canvasWidth, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"font-size\", ctx.nameFont, \"px\")(\"margin-bottom\", ctx.nameMargin, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.name, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"font-size\", ctx.bottomLabelFont, \"px\")(\"margin-top\", ctx.bottomLabelMargin, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.bottomLabel, \" \");\n      }\n    },\n    styles: [\"*[_ngcontent-%COMP%]{font-family:Roboto,'Helvetica Neue',sans-serif}.gauge-chart[_ngcontent-%COMP%]{display:flex;flex-direction:column;text-align:center}.gauge-chart__label[_ngcontent-%COMP%]{font-weight:700}\"]\n  });\n  return GaugeChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet GaugeChartModule = /*#__PURE__*/(() => {\n  class GaugeChartModule {}\n\n  GaugeChartModule.ɵfac = function GaugeChartModule_Factory(t) {\n    return new (t || GaugeChartModule)();\n  };\n\n  GaugeChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GaugeChartModule\n  });\n  GaugeChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return GaugeChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeChartModule, {\n    declarations: [GaugeChartComponent],\n    exports: [GaugeChartComponent]\n  });\n})();\n\nexport { GaugeChartComponent, GaugeChartModule }; //# sourceMappingURL=angular-gauge-chart.js.map","map":null,"metadata":{},"sourceType":"module"}