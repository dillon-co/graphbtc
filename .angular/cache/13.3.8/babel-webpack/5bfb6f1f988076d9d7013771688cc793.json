{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { routerTransition } from '../../router.animations';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"ng2-charts\";\n\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nfunction DashboardComponent_div_1_div_109_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47)(1, \"div\", 48)(2, \"i\", 49);\n    i0.ɵɵtext(3, \"album\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 50)(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementStart(7, \"small\", 51);\n    i0.ɵɵelement(8, \"span\", 52);\n    i0.ɵɵelementStart(9, \"span\", 53);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const tag_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r2.donughtchartData[0][\"backgroundColor\"][i_r5]));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", tag_r4, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.polarchartData[0][\"data\"][i_r5], \" Sats\");\n  }\n}\n\nfunction DashboardComponent_div_1_div_125_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 54)(2, \"div\", 2)(3, \"div\", 55)(4, \"i\", 49);\n    i0.ɵɵtext(5, \"album\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 50)(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const d_r6 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, d_r6[\"borderColor\"]));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", d_r6[\"label\"].split(\"_\").join(\" \"), \" \");\n  }\n}\n\nfunction DashboardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2)(2, \"div\", 3)(3, \"form\", 4);\n    i0.ɵɵelement(4, \"input\", 5);\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_1_Template_button_click_5_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.runShowData($event);\n    });\n    i0.ɵɵtext(6, \"Get Data\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 2)(9, \"div\", 7)(10, \"div\", 8);\n    i0.ɵɵelement(11, \"div\", 9);\n    i0.ɵɵelementStart(12, \"div\", 10)(13, \"div\", 2)(14, \"div\", 11)(15, \"p\", 12);\n    i0.ɵɵtext(16, \"Net Profits (In Sats)\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(17, \"div\", 13)(18, \"canvas\", 14);\n    i0.ɵɵlistener(\"chartHover\", function DashboardComponent_div_1_Template_canvas_chartHover_18_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.chartHovered($event);\n    })(\"chartClick\", function DashboardComponent_div_1_Template_canvas_chartClick_18_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.chartClicked($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 15)(20, \"div\", 16)(21, \"div\", 17)(22, \"div\", 18)(23, \"div\", 2)(24, \"div\", 19)(25, \"h6\", 20);\n    i0.ɵɵelement(26, \"span\", 21);\n    i0.ɵɵtext(27);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(28, \"div\", 22)(29, \"p\");\n    i0.ɵɵtext(30, \"Total\");\n    i0.ɵɵelementEnd()()()()()();\n    i0.ɵɵelementStart(31, \"div\", 16)(32, \"div\", 17)(33, \"div\", 18)(34, \"div\", 2)(35, \"div\", 23)(36, \"h6\", 20);\n    i0.ɵɵelement(37, \"span\", 21);\n    i0.ɵɵtext(38);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 22)(40, \"p\");\n    i0.ɵɵtext(41, \"Profit\");\n    i0.ɵɵelementEnd()()()()()();\n    i0.ɵɵelementStart(42, \"div\", 16)(43, \"div\", 17)(44, \"div\", 18)(45, \"div\", 2)(46, \"div\", 24)(47, \"h6\", 20);\n    i0.ɵɵelement(48, \"span\", 21);\n    i0.ɵɵtext(49);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(50, \"div\", 22)(51, \"p\");\n    i0.ɵɵtext(52, \"Loss\");\n    i0.ɵɵelementEnd()()()()()()()()();\n    i0.ɵɵelementStart(53, \"div\", 7)(54, \"div\", 8)(55, \"div\", 10)(56, \"div\", 2)(57, \"div\", 25)(58, \"p\", 12);\n    i0.ɵɵtext(59, \"Ending Balance\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(60, \"div\", 26)(61, \"h3\", 27);\n    i0.ɵɵtext(62, \"Total\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(63, \"h5\", 28);\n    i0.ɵɵtext(64);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(65, \"div\", 29)(66, \"div\", 30)(67, \"div\", 31)(68, \"canvas\", 14);\n    i0.ɵɵlistener(\"chartHover\", function DashboardComponent_div_1_Template_canvas_chartHover_68_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.chartHovered($event);\n    })(\"chartClick\", function DashboardComponent_div_1_Template_canvas_chartClick_68_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.chartClicked($event);\n    });\n    i0.ɵɵelementEnd()()()()()()();\n    i0.ɵɵelementStart(69, \"div\", 32)(70, \"div\", 33)(71, \"div\", 10)(72, \"div\", 2)(73, \"div\", 11)(74, \"p\", 12);\n    i0.ɵɵtext(75, \"Cash Flow Over Time\");\n    i0.ɵɵelement(76, \"br\")(77, \"small\", 34);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(78, \"div\", 35)(79, \"div\", 36)(80, \"canvas\", 14);\n    i0.ɵɵlistener(\"chartHover\", function DashboardComponent_div_1_Template_canvas_chartHover_80_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.chartHovered($event);\n    })(\"chartClick\", function DashboardComponent_div_1_Template_canvas_chartClick_80_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.chartClicked($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(81, \"div\", 2)(82, \"div\", 37)(83, \"p\", 38);\n    i0.ɵɵtext(84, \"Total Credit\");\n    i0.ɵɵelementStart(85, \"i\", 39);\n    i0.ɵɵtext(86, \"album\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(87, \"p\", 34);\n    i0.ɵɵtext(88);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(89, \"div\", 40)(90, \"p\", 38)(91, \"i\", 41);\n    i0.ɵɵtext(92, \"album\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(93, \" Total Debit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(94, \"p\", 34);\n    i0.ɵɵtext(95);\n    i0.ɵɵelementEnd()()()()()()();\n    i0.ɵɵelementStart(96, \"div\", 42)(97, \"div\", 8)(98, \"div\", 10)(99, \"div\", 2)(100, \"div\", 25)(101, \"p\", 12);\n    i0.ɵɵtext(102, \"Amount By Tag\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(103, \"div\", 43)(104, \"div\", 29)(105, \"div\", 30)(106, \"div\", 44)(107, \"canvas\", 14);\n    i0.ɵɵlistener(\"chartHover\", function DashboardComponent_div_1_Template_canvas_chartHover_107_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.chartHovered($event);\n    })(\"chartClick\", function DashboardComponent_div_1_Template_canvas_chartClick_107_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.chartClicked($event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(108, \"div\", 11);\n    i0.ɵɵtemplate(109, DashboardComponent_div_1_div_109_Template, 11, 5, \"div\", 45);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(110, \"div\", 2)(111, \"div\", 32)(112, \"div\", 8)(113, \"div\", 10)(114, \"div\", 2)(115, \"div\", 11)(116, \"p\", 12);\n    i0.ɵɵtext(117, \"Cash Flow By Tag\");\n    i0.ɵɵelement(118, \"br\");\n    i0.ɵɵelementStart(119, \"small\", 34);\n    i0.ɵɵtext(120, \"Per Quarter\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(121, \"div\", 35);\n    i0.ɵɵelement(122, \"br\");\n    i0.ɵɵelementStart(123, \"div\", 36)(124, \"canvas\", 14);\n    i0.ɵɵlistener(\"chartHover\", function DashboardComponent_div_1_Template_canvas_chartHover_124_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.chartHovered($event);\n    })(\"chartClick\", function DashboardComponent_div_1_Template_canvas_chartClick_124_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.chartClicked($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(125, DashboardComponent_div_1_div_125_Template, 9, 4, \"div\", 46);\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(18);\n    i0.ɵɵproperty(\"datasets\", ctx_r0.profitAndLossData)(\"labels\", ctx_r0.profitAndLossLabels)(\"options\", ctx_r0.profitAndLossOptions)(\"legend\", ctx_r0.profitAndLossLegend)(\"chartType\", ctx_r0.profitAndLossType);\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r0.profitAndLossTotal);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate(ctx_r0.incomeTotal);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.lossTotal, \"\");\n    i0.ɵɵadvance(15);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.sumNums(ctx_r0.donughtchartData[0][\"data\"]), \" Sats\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"datasets\", ctx_r0.donughtchartData)(\"labels\", ctx_r0.donughtchartLabels)(\"options\", ctx_r0.donughtchartOptions)(\"legend\", ctx_r0.donughtchartLegend)(\"chartType\", ctx_r0.donughtchartType);\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"datasets\", ctx_r0.mixedchartjsData)(\"labels\", ctx_r0.mixedchartjsLabels)(\"options\", ctx_r0.mixedchartjsOptions)(\"legend\", ctx_r0.mixedchartjsLegend)(\"chartType\", ctx_r0.mixedchartjsType);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(ctx_r0.totalCredit);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r0.totalDebit);\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"datasets\", ctx_r0.polarchartData)(\"labels\", ctx_r0.polarchartLabels)(\"options\", ctx_r0.polarchartOptions)(\"legend\", ctx_r0.polarchartLegend)(\"chartType\", ctx_r0.polarchartType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.polarchartLabels);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"datasets\", ctx_r0.mixedlinechartjsData)(\"labels\", ctx_r0.mixedlinechartjsLabels)(\"options\", ctx_r0.mixedlinechartjsOptions)(\"legend\", ctx_r0.mixedlinechartjsLegend)(\"chartType\", ctx_r0.mixedlinechartjsType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.mixedlinechartjsData);\n  }\n}\n\nfunction DashboardComponent_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 57);\n    i0.ɵɵelementStart(2, \"h2\");\n    i0.ɵɵtext(3, \"Welcome to GraphBTC\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h5\");\n    i0.ɵɵtext(5, \"Input your lightning node rune to see your cash flow\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"form\", 4);\n    i0.ɵɵelement(7, \"input\", 5);\n    i0.ɵɵelementStart(8, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_2_div_2_Template_button_click_8_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.runShowData($event);\n    });\n    i0.ɵɵtext(9, \"Get Data\");\n    i0.ɵɵelementEnd()()();\n  }\n}\n\nfunction DashboardComponent_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 58);\n    i0.ɵɵelementStart(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"br\")(5, \"br\");\n    i0.ɵɵelementStart(6, \"h5\");\n    i0.ɵɵtext(7, \"Looking good today\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r20.loadingMessage, \" . . .\");\n  }\n}\n\nfunction DashboardComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 56);\n    i0.ɵɵtemplate(2, DashboardComponent_div_2_div_2_Template, 10, 0, \"div\", 0);\n    i0.ɵɵtemplate(3, DashboardComponent_div_2_div_3_Template, 8, 1, \"div\", 0);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isLoading);\n  }\n}\n\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor() {\n      this.wasmReady = new BehaviorSubject(false);\n      this.showData = false;\n      this.isLoading = false;\n      this.loadingMessage = \"Connecting to node\"; // public balances: Array<any> = []\n      // public invoices:Array<any> = []\n      // public incomeEvents: Array<any> = []\n      // public pays: Array<any> = []\n\n      this.balances = [{\n        'account': 'wallet',\n        'balances': [{\n          'balance': '9981515000msat',\n          'coin_type': 'bcrt'\n        }]\n      }, {\n        'account': 'a5b23dff5177badd6df725cefeb83ceccbfc52dc64a16b38894a41f0ad8fa181',\n        'balances': [{\n          'balance': '12981515000msat',\n          'coin_type': 'bcrt'\n        }]\n      }, {\n        'account': '27a4a4dd880e861e390517de3e786a237c5ad1f00faab277382664e76b5c3870',\n        'balances': [{\n          'balance': '19981515000msat',\n          'coin_type': 'bcrt'\n        }]\n      }];\n      this.invoices = [{\n        'label': '1',\n        'bolt11': 'lnbcrt100n1p3z6ywzpp5545vx6adm7jdjk6eahfvjmaw0yuts05qcnjluujg6972av0kxmtsdq8deh47vgxqyjw5qcqp9sp5hlc5srkkuf20wv0q536faap05d90v37s5c4lxeztjxru4mzp6mks9qxsqyssq32kp2dyvcvvvteekqya4ycd5kp9pszx56044qsvwq9pm2q7pj0vrwhvseng8funma294u3nr74pzgn5jqqvjp73r8pqrkph45j4m3ucqcvsuzv',\n        'payment_hash': 'a568c36baddfa4d95b59edd2c96fae7938b83e80c4e5fe7248d17caeb1f636d7',\n        'msatoshi': 1138191000,\n        'amount_msat': '10000msat',\n        'status': 'paid',\n        'pay_index': 1,\n        'msatoshi_received': 1138191000,\n        'amount_received_msat': '10000msat',\n        'paid_at': 1647120835,\n        'payment_preimage': 'c70178f722ac40a86d0142bdfeea984fac97fffcb11137995f3a7cb76db255ef',\n        'description': 'no_1',\n        'expires_at': 1647725634\n      }, {\n        'label': '3',\n        'bolt11': 'lnbcrt100n1p3z6ywrpp5f4f87n2al6z42wq26m9qh6f527d7sd695vpnsm3uf2agxxcngvysdq8deh47vcxqyjw5qcqp9sp5fnp04ejl5jktrjvtm5xxcejq4awv2u39ghsnmhtrtswf3t04pgpq9qxsqyssqu6e7nuq29cr4phn7nwlyrj4jmug7xgykcs78pm56npa60nkykvz8xvuk27dj6kyfx5deeh6apcntts7fy3s5edp73fclphzwla74x7gqh6xl4d',\n        'payment_hash': '4d527f4d5dfe8555380ad6ca0be934579be83745a303386e3c4aba831b134309',\n        'msatoshi': 1110020000,\n        'amount_msat': '10000msat',\n        'status': 'paid',\n        'pay_index': 2,\n        'msatoshi_received': 111002000,\n        'amount_received_msat': '10000msat',\n        'paid_at': 1647120836,\n        'payment_preimage': '9de956f89a7a7c414e20791e544c29d9b3009c8b334c03e2d7e9ecc9d73cd5de',\n        'description': 'no_3',\n        'expires_at': 1647725635\n      }, {\n        'label': '3',\n        'bolt11': 'lnbcrt100n1p3z6ywrpp5f4f87n2al6z42wq26m9qh6f527d7sd695vpnsm3uf2agxxcngvysdq8deh47vcxqyjw5qcqp9sp5fnp04ejl5jktrjvtm5xxcejq4awv2u39ghsnmhtrtswf3t04pgpq9qxsqyssqu6e7nuq29cr4phn7nwlyrj4jmug7xgykcs78pm56npa60nkykvz8xvuk27dj6kyfx5deeh6apcntts7fy3s5edp73fclphzwla74x7gqh6xl4d',\n        'payment_hash': '4d527f4d5dfe8555380ad6ca0be934579be83745a303386e3c4aba831b134309',\n        'msatoshi': 1230010000,\n        'amount_msat': '10000msat',\n        'status': 'paid',\n        'pay_index': 2,\n        'msatoshi_received': 1230010000,\n        'amount_received_msat': '10000msat',\n        'paid_at': 1647120837,\n        'payment_preimage': '9de956f89a7a7c414e20791e544c29d9b3009c8b334c03e2d7e9ecc9d73cd5de',\n        'description': 'no_3',\n        'expires_at': 1647725635\n      }, {\n        'label': '3',\n        'bolt11': 'lnbcrt100n1p3z6ywrpp5f4f87n2al6z42wq26m9qh6f527d7sd695vpnsm3uf2agxxcngvysdq8deh47vcxqyjw5qcqp9sp5fnp04ejl5jktrjvtm5xxcejq4awv2u39ghsnmhtrtswf3t04pgpq9qxsqyssqu6e7nuq29cr4phn7nwlyrj4jmug7xgykcs78pm56npa60nkykvz8xvuk27dj6kyfx5deeh6apcntts7fy3s5edp73fclphzwla74x7gqh6xl4d',\n        'payment_hash': '4d527f4d5dfe8555380ad6ca0be934579be83745a303386e3c4aba831b134309',\n        'msatoshi': 1142001000,\n        'amount_msat': '10000msat',\n        'status': 'paid',\n        'pay_index': 2,\n        'msatoshi_received': 1142001000,\n        'amount_received_msat': '10000msat',\n        'paid_at': 1647120838,\n        'payment_preimage': '9de956f89a7a7c414e20791e544c29d9b3009c8b334c03e2d7e9ecc9d73cd5de',\n        'description': 'no_3',\n        'expires_at': 1647725635\n      }];\n      this.incomeEvents = [{\n        'account': 'a5b23dff5177badd6df725cefeb83ceccbfc52dc64a16b38894a41f0ad8fa181',\n        'tag': 'onchain_fee',\n        'credit': 0,\n        'debit': 980000,\n        'currency': 'bcrt',\n        'timestamp': 1647120683,\n        'txid': '90a11b87bcf865ae3f7d0c94d44a05072dcd32f27fc9ab01dfc6e144a7e61e26'\n      }, {\n        'account': '27a4a4dd880e861e390517de3e786a237c5ad1f00faab277382664e76b5c3870',\n        'tag': 'onchain_fee',\n        'credit': 0,\n        'debit': 13024000,\n        'currency': 'bcrt',\n        'timestamp': 1647120675,\n        'txid': '5b78b9b8c84385182533c4b3004d6dbe9bb86a4af2d8ce01674d1fb36383d135'\n      }, {\n        'account': 'wallet',\n        'tag': 'onchain_fee',\n        'credit': 0,\n        'debit': 3277000,\n        'currency': 'bcrt',\n        'timestamp': 1647120678,\n        'txid': '2685b28db8196821933961dea5dae0b608ba46e81c4b5202f12ec94df57a473e'\n      }, {\n        'account': '27a4a4dd880e861e390517de3e786a237c5ad1f00faab277382664e76b5c3870',\n        'tag': 'onchain_fee',\n        'credit': 0,\n        'debit': 1224000,\n        'currency': 'bcrt',\n        'timestamp': 1647120680,\n        'txid': '203f8599381a9ea6371c1bbd914c55aedb067844b4b432e2ea9bd6a5d6da91f4'\n      }, {\n        'account': 'wallet',\n        'tag': 'deposit',\n        'credit': 20000000,\n        'debit': 0,\n        'currency': 'bcrt',\n        'timestamp': 1647120683,\n        'outpoint': 'f9717f0809d842619c11e2f85a398df778186db2c94c78c73b2490a90cc0a23f:0'\n      }, {\n        'account': 'a5b23dff5177badd6df725cefeb83ceccbfc52dc64a16b38894a41f0ad8fa181',\n        'tag': 'lease_fee',\n        'credit': 6432000,\n        'debit': 0,\n        'currency': 'bcrt',\n        'timestamp': 1647120684\n      }, {\n        'account': '27a4a4dd880e861e390517de3e786a237c5ad1f00faab277382664e76b5c3870',\n        'tag': 'lease_fee',\n        'credit': 0,\n        'debit': 6432000,\n        'currency': 'bcrt',\n        'timestamp': 1647120685\n      }, {\n        'account': 'a5b23dff5177badd6df725cefeb83ceccbfc52dc64a16b38894a41f0ad8fa181',\n        'tag': 'invoice',\n        'credit': 1000000,\n        'debit': 0,\n        'currency': 'bcrt',\n        'timestamp': 1647120688,\n        'payment_id': '0b08781f3ffec55a1cf11ff950805359dce03af94de3b543ff82e9d3d97a4f32'\n      }, {\n        'account': '27a4a4dd880e861e390517de3e786a237c5ad1f00faab277382664e76b5c3870',\n        'tag': 'invoice',\n        'credit': 1000000,\n        'debit': 0,\n        'currency': 'bcrt',\n        'timestamp': 1647120689,\n        'payment_id': 'e082b925ba5b872a0376a32ac3bfc539ecab12e9f3dd8b20e5c49710300cca2e'\n      }, {\n        'account': 'wallet',\n        'tag': 'journal_entry',\n        'credit': 0,\n        'debit': 660000,\n        'currency': 'bcrt',\n        'timestamp': 1647120695\n      }];\n      this.pays = [{\n        'bolt11': 'lnbcrt100n1p3z6ywzpp5545vx6adm7jdjk6eahfvjmaw0yuts05qcnjluujg6972av0kxmtsdq8deh47vgxqyjw5qcqp9sp5hlc5srkkuf20wv0q536faap05d90v37s5c4lxeztjxru4mzp6mks9qxsqyssq32kp2dyvcvvvteekqya4ycd5kp9pszx56044qsvwq9pm2q7pj0vrwhvseng8funma294u3nr74pzgn5jqqvjp73r8pqrkph45j4m3ucqcvsuzv',\n        'destination': '022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59',\n        'payment_hash': 'a568c36baddfa4d95b59edd2c96fae7938b83e80c4e5fe7248d17caeb1f636d7',\n        'status': 'complete',\n        'created_at': 1647120834,\n        'preimage': 'c70178f722ac40a86d0142bdfeea984fac97fffcb11137995f3a7cb76db255ef',\n        'amount_msat': 10000,\n        'amount_sent_msat': 10000\n      }];\n      this.incomeTags = [\"deposit\", \"withdrawal\", \"penalty\", \"invoice\", \"routed\", \"pushed\", \"channel_open\", \"channel_close\", \"delayed_to_us\", \"htlc_timeout\", \"htlc_fulfill\", \"htlc_tx\", \"to_wallet\", \"ignored\", \"anchor\", \"to_them\", \"penalized\", \"stolen\", \"to_miner\", \"lease_fee\", \"journal_entry\", \"penalty_adj\", \"invoice_fee\"];\n      this.totalDebit = 0;\n      this.totalCredit = 0; // donughtchart chart\n\n      this.donughtchartOptions = {\n        elements: {\n          arc: {\n            borderWidth: 0\n          }\n        },\n        cutoutPercentage: 30,\n        responsive: true,\n        aspectRatio: '1',\n        legend: {\n          display: false\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Doughnut Chart'\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        }\n      };\n      this.donughtchartLabels = [];\n      this.donughtchartData = [{\n        data: [],\n        // backgroundColor: ['rgba(240, 240, 240, 0.5)', '#5B92FF', '#1FC96E', '#F85778', '#F85779'],\n        backgroundColor: [],\n        // backgroundColor: ['#5B92FF', '#1FC96E', '#F85778', '#F85779'],\n        // backgroundColor: [],\n        label: 'Dataset 1'\n      }]; // anything you have received Payment id matches payment hash\n      // preimage is proof of payment\n      // public getPercentOnChainTransactions(): {\n      //\n      // }\n\n      this.alerts = [];\n      this.sliders = []; // summaryChart1 chart\n\n      this.summaryChart1Options = {\n        scaleShowVerticalLines: false,\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: false,\n          text: 'Chart.js Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          enabled: false\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            display: false,\n            scaleLabel: {\n              display: true,\n              labelString: 'Month'\n            }\n          }],\n          yAxes: [{\n            display: false,\n            scaleLabel: {\n              display: true,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.summaryChart1Labels = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];\n      this.summaryChart1Data = [{\n        data: [65, 59, 80, 81, 56, 55, 40],\n        label: 'Series A',\n        backgroundColor: 'transparent',\n        borderColor: '#FFFFFF',\n        borderWidth: '1.5',\n        radius: 0,\n        fill: false\n      }]; // summaryChart2 chart\n\n      this.summaryChart2Options = {\n        scaleShowVerticalLines: false,\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: false,\n          text: 'Chart.js Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n          enabled: false\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: false\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'Month'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: false\n            },\n            display: false,\n            stacked: true,\n            scaleLabel: {\n              display: false,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.summaryChart2Labels = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];\n      this.summaryChart2Data = [{\n        data: [65, 59, 80, 81, 56, 55, 40],\n        label: 'Series A',\n        backgroundColor: '#FFFFFF',\n        borderColor: 'transparent',\n        borderWidth: '1.5',\n        radius: 0,\n        fill: false\n      }]; // mixedchartjs chart\n\n      this.mixedchartjsOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Line Chart - Stacked Area'\n        },\n        tooltips: {\n          mode: 'index'\n        },\n        hover: {\n          mode: 'index'\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'Month'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            display: true,\n            stacked: true,\n            scaleLabel: {\n              display: false,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.mixedchartjsLabels = [];\n      this.mixedchartjsData = [{\n        label: 'Credit',\n        borderWidth: '1',\n        borderColor: 'rgba(144, 181, 255, 0)',\n        backgroundColor: 'rgba(91, 146, 255, 0.70) ',\n        data: []\n      }, {\n        label: 'Debit',\n        borderWidth: '1',\n        backgroundColor: '#ff6e73',\n        borderColor: '#ff6e73',\n        data: []\n      }];\n      this.profitAndLossOptions = {\n        responsive: true,\n        maintainAspectRatio: true,\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        title: {\n          display: false,\n          text: 'Total Profit And Loss'\n        },\n        tooltips: {\n          enabled: false\n        },\n        hover: {\n          mode: null\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: false,\n              fontColor: '#90b5ff'\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'Total  |  Profit  |  Loss '\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            display: true,\n            stacked: false,\n            scaleLabel: {\n              display: false,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.profitAndLossLabels = ['']; // Profit and loss chart\n\n      this.profitAndLossData = [{\n        label: 'Total',\n        borderWidth: '0',\n        backgroundColor: '#1FC96E',\n        borderColor: '#1FC96E',\n        data: []\n      }, {\n        label: 'Profit',\n        borderWidth: '0',\n        backgroundColor: 'rgba(91, 146, 255, 0.70)',\n        borderColor: 'rgba(91, 146, 255, 0.70)',\n        data: []\n      }, {\n        label: 'Loss',\n        borderWidth: '0',\n        backgroundColor: '#ff6e73',\n        borderColor: '#ff6e73',\n        data: []\n      }]; // line chart\n\n      this.mixedlinechartjsOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Line Chart - Stacked Area'\n        },\n        tooltips: {\n          mode: 'index'\n        },\n        hover: {\n          mode: 'index'\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'Month'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            display: true,\n            stacked: true,\n            scaleLabel: {\n              display: false,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.mixedlinechartjsLabels = [];\n      this.mixedlinechartjsData = []; // Polar chart\n\n      this.polarchartOptions = {\n        responsive: true,\n        legend: {\n          display: false,\n          position: 'right'\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Polar Area Chart'\n        },\n        // scale: {\n        //     ticks: {\n        //         beginAtZero: true\n        //     },\n        //     reverse: false\n        // },\n        animation: {\n          animateRotate: false,\n          animateScale: true\n        }\n      };\n      this.polarchartLabels = [];\n      this.polarchartData = [{\n        data: [],\n        backgroundColor: ['#ff6e73', '#ff7600', '#ffc322', '#0fddad', '#5B92FF'],\n        borderColor: 'rgb(0, 0, 0, 0)',\n        label: 'My dataset' // for legend\n\n      }]; // linechartlarge chart\n\n      this.linechartlargeOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Line Chart - Stacked Area'\n        },\n        tooltips: {\n          mode: 'index'\n        },\n        hover: {\n          mode: 'index'\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'Month'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            display: false,\n            stacked: true,\n            scaleLabel: {\n              display: false,\n              labelString: 'Value'\n            }\n          }]\n        }\n      };\n      this.linechartlargeLabels = [];\n      this.linechartlargeData = [{\n        data: [],\n        label: 'Invoices',\n        borderWidth: '2',\n        borderColor: '#efe9e9',\n        backgroundColor: 'rgba(0, 0, 0, 0)'\n      } // {\n      //     data: [],\n      //     label: 'Invoices',\n      //     borderWidth: '2',\n      //     borderColor: '#efe9e9',\n      //     backgroundColor: 'rgba(0, 0, 0, 0)'\n      // }\n      ]; // barcharts chart\n\n      this.barchartsOptions = {\n        maintainAspectRatio: false,\n        responsive: true,\n        legend: {\n          display: false,\n          position: 'top'\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: true,\n              fontColor: '#90b5ff'\n            },\n            categoryPercentage: 0.3,\n            barPercentage: 1,\n            barThickness: 5\n          }],\n          yAxes: [{\n            display: false\n          }]\n        },\n        title: {\n          display: false,\n          text: 'Chart.js Bar Chart'\n        }\n      };\n      this.barchartsLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May'];\n      this.barchartsData = [{\n        label: 'Dataset 1',\n        backgroundColor: '#efe9e9',\n        borderColor: '#efe9e9',\n        borderWidth: 1,\n        data: [30, 20, 35, 15, 20]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: '#5B92FF',\n        borderColor: '#5B92FF',\n        borderWidth: 1,\n        data: [35, 26, 25, 45, 30]\n      }];\n    }\n\n    connectNode(ip_addr, node_id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        /* Connect to the lightning node */\n        // const LNSocket = await lnsocket_init();\n        //\n        // this.lnsocket = LNSocket();\n        //\n        // this.lnsocket.genkey();\n        //\n        // await this.lnsocket.connect_and_init(node_id, ip_addr)\n      });\n    }\n\n    populateData(rune) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loadingMessage = \"Grabbing Data\";\n        var b = yield this.lnsocket.rpc({\n          method: \"listbalances\",\n          rune\n        });\n        this.balances = b.result['accounts'];\n        var ie = yield this.lnsocket.rpc({\n          method: \"listincome\",\n          rune\n        });\n        this.incomeEvents = ie.result['income_events'];\n\n        for (var idx = 0; idx < this.incomeEvents.length; idx++) {\n          this.incomeEvents[idx].credit = parseInt(this.incomeEvents[idx].credit);\n          this.incomeEvents[idx].debit = parseInt(this.incomeEvents[idx].debit);\n        }\n\n        var i = yield this.lnsocket.rpc({\n          method: \"listinvoices\",\n          rune\n        });\n        this.invoices = i.result['invoices'];\n        var p = yield this.lnsocket.rpc({\n          method: \"listpays\",\n          rune\n        });\n        this.pays = yield p.result['pays'];\n        this.showData = true;\n      });\n    }\n\n    runShowData(e) {\n      e.preventDefault();\n      this.isLoading = true; // var rune = \"NZG2PwTxSltQt3JMtlbwz1dxOdNnnssWH5Sztk6pKdM9MTEmbWV0aG9kXmxpc3R8bWV0aG9kXmdldHxtZXRob2Q9c3VtbWFyeSZtZXRob2QvZ2V0c2hhcmVkc2VjcmV0Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl\";\n      //\n      // const hostname = \"ws://104.131.77.55:9999\";\n      // const node_id =  \"02cca6c5c966fcf61d121e3a70e03a1cd9eeeea024b26ea666ce974d43b242e636\";\n      // if (this.lnsocket === undefined) {\n      //   await this.connectNode(hostname, node_id)\n      // }\n      //\n      // await this.populateData(rune);\n\n      console.log(\"Wtf\");\n      this.loadingMessage = \"Drawing Charts\";\n      this.mixedChartEtl();\n      this.lineChartEtl();\n      this.donughtChartEtl();\n      this.mixedLineChartEtl();\n      this.profitAndLossEtl();\n      this.polarChartEtl();\n      this.isLoading = false;\n      this.showData = true;\n    }\n\n    sumNums(chartData) {\n      var s = chartData.reduce((sum, current) => sum + current, 0);\n      return s;\n    }\n\n    getIncomeTotal() {\n      var incomeTotal = 0;\n\n      for (var i in this.incomeEvents) {\n        var ie = this.incomeEvents[i];\n        var debit = ie['debit'];\n        var credit = ie['credit'];\n        incomeTotal += credit;\n        incomeTotal -= debit;\n      }\n\n      return incomeTotal / 1000;\n    }\n\n    getPaysTotal() {\n      var paysTotal = 0;\n\n      for (var i in this.pays) {\n        var p = this.pays[i];\n        paysTotal += p['amount_sent_msat'];\n      }\n\n      return paysTotal / 1000;\n    }\n\n    randomColor() {\n      var r = Math.floor(Math.random() * 255);\n      var g = Math.floor(Math.random() * 255);\n      var b = Math.floor(Math.random() * 255);\n      return `rgba(${r}, ${g}, ${b}, 0.7)`;\n    }\n\n    donughtChartEtl() {\n      for (var i in this.balances) {\n        var balance = parseInt(this.balances[i]['balances'][0]['balance']);\n        var account = this.balances[i]['account'];\n        this.donughtchartData[0]['data'].push(balance / 1000);\n        this.donughtchartData[0]['backgroundColor'].push(this.randomColor());\n        this.donughtchartLabels.push(account.slice(0, 6));\n      }\n    }\n\n    mixedChartEtl() {\n      for (var i in this.incomeEvents) {\n        var debit = this.incomeEvents[i]['debit'] / 1000;\n        var credit = this.incomeEvents[i]['credit'] / 1000;\n        var t = this.incomeEvents[i]['timestamp'];\n\n        if (debit > 0) {\n          this.mixedchartjsData[1]['data'].push(debit * -1);\n          this.mixedchartjsData[0]['data'].push(0);\n          this.totalDebit += debit;\n        }\n\n        if (credit > 0) {\n          this.mixedchartjsData[0]['data'].push(credit);\n          this.mixedchartjsData[1]['data'].push(0);\n          this.totalCredit += credit;\n        }\n\n        this.mixedchartjsLabels.push(this.formatTime(t));\n      }\n    }\n\n    profitAndLossEtl() {\n      var profit = 0;\n      var loss = 0;\n\n      for (var i in this.incomeEvents) {\n        profit += this.incomeEvents[i]['credit'];\n        loss += this.incomeEvents[i]['debit'];\n      }\n\n      var total = profit - loss;\n      this.incomeTotal = profit / 1000;\n      this.lossTotal = loss / 1000;\n      this.totalEvents = this.incomeEvents.length;\n      this.profitAndLossTotal = total / 1000;\n      this.profitAndLossData[0]['data'].push(total / 1000);\n      this.profitAndLossData[1]['data'].push(profit / 1000);\n      this.profitAndLossData[2]['data'].push(loss * -1 / 1000);\n    }\n\n    polarChartEtl() {\n      var dataByTag = {};\n\n      for (var i in this.incomeEvents) {\n        var [debit, credit, total, _, tag] = this.incomeEventData(this.incomeEvents[i]);\n        dataByTag.hasOwnProperty(tag) ? dataByTag[tag] += total : dataByTag[tag] = total;\n      }\n\n      for (var i in dataByTag) {\n        this.polarchartLabels.push(i);\n        this.polarchartData[0]['data'].push(dataByTag[i]);\n      }\n    }\n\n    mixedLineChartEtl() {\n      var dataByTag = {};\n\n      for (var i in this.incomeEvents) {\n        var [debit, credit, total, time, tag] = this.incomeEventData(this.incomeEvents[i]);\n        var hasDataWithTag;\n\n        if (this.mixedlinechartjsData.length > 0) {\n          for (var i in this.mixedlinechartjsData) {\n            hasDataWithTag = false;\n\n            if (this.mixedlinechartjsData[i]['label'] === tag) {\n              hasDataWithTag = true;\n              this.mixedlinechartjsData[i]['data'].push(total);\n            } else {\n              this.mixedlinechartjsData[i]['data'].push(0);\n            }\n          }\n        }\n\n        if (!hasDataWithTag) {\n          this.mixedlinechartjsData.push({\n            data: [total],\n            label: tag,\n            borderWidth: '2',\n            borderColor: this.randomColor(),\n            backgroundColor: 'rgba(0, 0, 0, 0)'\n          });\n        }\n\n        this.mixedlinechartjsLabels.push(this.formatTime(time));\n      }\n    }\n\n    lineChartEtl() {\n      for (var i in this.invoices) {\n        var amount = this.invoices[i]['msatoshi_received'] / 1000;\n        var t = this.formatTime(this.invoices[i]['paid_at']);\n        this.linechartlargeData[0]['data'].push(amount);\n        this.linechartlargeLabels.push(t);\n      }\n    }\n\n    incomeEventData(incomeEvent) {\n      var debit = incomeEvent['debit'] / 1000;\n      var credit = incomeEvent['credit'] / 1000;\n      var total = credit - debit;\n      var time = incomeEvent['timestamp'];\n      var tag = incomeEvent['tag'];\n      return [debit, credit, total, time, tag];\n    } // events\n\n\n    chartClicked(e) {// console.log(e);\n    }\n\n    chartHovered(e) {// console.log(e);\n    }\n\n    randomize() {\n      // Only Change 3 values\n      const data = [Math.round(Math.random() * 100), 59, 80, Math.random() * 100, 56, Math.random() * 100, 40];\n      const clone = JSON.parse(JSON.stringify(this.summaryChart1Data));\n      clone[0].data = data;\n      this.summaryChart1Data = clone;\n      /**\n       * (My guess), for Angular to recognize the change in the dataset\n       * it has to change the dataset variable directly,\n       * so one way around it, is to clone the data, change it and then\n       * assign it;\n       */\n    }\n\n    formatTime(unix_timestamp) {\n      // let unix_timestamp = 1549312452\n      // Create a new JavaScript Date object based on the timestamp\n      // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n      var date = new Date(unix_timestamp * 1000);\n      var month = date.getMonth();\n      var year = date.getFullYear();\n      var day = date.getDay(); // return date\n      // Hours part from the timestamp\n\n      var hours = date.getHours(); // // Minutes part from the timestamp\n\n      var minutes = \"0\" + date.getMinutes(); // // Seconds part from the timestamp\n\n      var seconds = \"0\" + date.getSeconds(); //\n      // // Will display time in 10:30:23 format\n\n      var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      var formattedDate = month + '/' + (day + 1) + '/' + year; // return formattedTime;\n\n      return formattedDate + ' ' + formattedTime; // return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      // return new Date(unix_timestamp * 1000).getDate();\n    }\n\n    ngOnInit() {\n      this.summaryChart1Type = 'line';\n      this.summaryChart2Type = 'bar';\n      this.mixedchartjsType = 'bar';\n      this.profitAndLossType = 'bar';\n      this.mixedlinechartjsType = 'line';\n      this.donughtchartType = 'doughnut';\n      this.linechartlargeType = 'line';\n      this.barchartsType = 'bar';\n      this.polarchartType = 'pie'; // this.polarchartType = 'polarArea';\n\n      /* Connect to the lightning node */\n      // this.runShowData();\n\n      $('#mapwrap').vectorMap({\n        map: 'world_mill'\n      });\n    }\n\n    closeAlert(alert) {\n      const index = this.alerts.indexOf(alert);\n      this.alerts.splice(index, 1);\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)();\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-12\"], [1, \"align-self-center\"], [\"type\", \"search\", \"placeholder\", \"Input Rune\", \"aria-label\", \"Search\", 1, \"form-control\", \"text-center\", \"form-control-xl\", \"my-2\", \"py-2\"], [\"type\", \"\", 1, \"btn\", \"btn-primary\", \"btn-md\", \"btn-block\", 3, \"click\"], [1, \"col-12\", \"col-md-6\", \"col-lg-6\", \"col-xl-6\"], [1, \"card\", \"border-0\", \"shadow-sm\", \"mb-4\"], [1, \"background-half\", \"text-template-primary-opac-10\", \"h-200\"], [1, \"card-header\", \"border-0\", \"bg-none\"], [1, \"col\"], [1, \"fs15\"], [1, \"card-body\", \"text-center\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"chartType\", \"chartHover\", \"chartClick\"], [1, \"row\", \"text-center\"], [1, \"col-12\", \"col-md-6\", \"col-lg-6\", \"col-xl-4\"], [1, \"card\", \"border-0\", \"shadow-sm\", \"overflow-hidden\", \"mb-4\"], [1, \"card-body\", \"py-0\"], [1, \"col-12\", \"summary-total\", \"text-white\", \"py-2\"], [1, \"mb-0\"], [1, \"text-mute\", \"d-block\"], [1, \"col\", \"py-2\", \"p-0\"], [1, \"col-12\", \"profit-total\", \"text-white\", \"py-2\"], [1, \"col-12\", \"loss-total\", \"text-white\", \"py-2\"], [1, \"col\", \"align-self-center\"], [1, \"card-body\", \"pt-2\", \"mb-4\"], [1, \"mt-2\", \"text-template-primary-light\", \"mb-2\", \"text-center\"], [1, \"text-center\"], [1, \"row\", \"align-self-center\", \"mt-4\"], [1, \"col\", \"text-center\", \"align-self-center\"], [1, \"donughtchart\"], [1, \"col-12\", \"col-md-6\", \"col-lg-6\", \"col-xl-12\", \"mb-4\"], [1, \"card\", \"border-0\", \"shadow-sm\", \"h-100\"], [1, \"text-template-primary-light\"], [1, \"card-body\"], [1, \"areachart\"], [1, \"col-6\", \"text-right\"], [1, \"mb-1\"], [1, \"material-icons\", \"text-template-primary\", \"fs15\", \"vm\"], [1, \"col-6\", \"border-left-dashed\"], [1, \"material-icons\", \"text-template-warning\", \"fs15\", \"vm\"], [1, \"col-12\", \"col-md-6\", \"col-lg-6\", \"col-xl-12\"], [1, \"card-body\", \"pt-2\", \"mb-3\"], [1, \"polarchart\"], [\"class\", \"row mb-1\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mb-1\"], [1, \"col-4\"], [1, \"material-icons\", \"fs15\", \"vm\", 3, \"ngStyle\"], [1, \"col\", \"pl-0\"], [1, \"d-block\"], [1, \"text-template-primary\"], [1, \"text-primary\"], [1, \"col-3\"], [1, \"col-auto\"], [1, \"align-self-center\", \"text-center\"], [\"src\", \"assets/images/graphbtc-logo.png\", \"alt\", \"\", \"width\", \"400px\"], [\"src\", \"assets/images/animated-logo.png\", \"alt\", \"\", \"width\", \"400px\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtemplate(1, DashboardComponent_div_1_Template, 126, 33, \"div\", 0);\n        i0.ɵɵtemplate(2, DashboardComponent_div_2_Template, 4, 2, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"@routerTransition\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.showData);\n      }\n    },\n    directives: [i1.NgIf, i2.BaseChartDirective, i1.NgForOf, i1.NgStyle],\n    styles: [\"[_nghost-%COMP%]     .dropdown-menu-right{right:0;left:auto}.summary-small[_ngcontent-%COMP%]{height:40px;width:60px}.loadingRotation[_ngcontent-%COMP%]{-webkit-animation:rotation 3s infinite linear;animation:rotation 3s infinite linear}@-webkit-keyframes rotation{0%{transform:rotate(0)}to{transform:rotate(359deg)}}@keyframes rotation{0%{transform:rotate(0)}to{transform:rotate(359deg)}}.summary-total[_ngcontent-%COMP%]{background-color:#1fc96e}.profit-total[_ngcontent-%COMP%]{background-color:#5b92ffb3}.loss-total[_ngcontent-%COMP%]{background-color:#ff6e73}\"],\n    data: {\n      animation: [routerTransition()]\n    }\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}